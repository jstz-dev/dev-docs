import{_ as t,c as s,ag as a,o}from"./chunks/framework.qSHG2lgv.js";const u=JSON.parse('{"title":"üôè Request","description":"","frontmatter":{},"headers":[],"relativePath":"api/request.md","filePath":"api/request.md"}'),i={name:"api/request.md"};function r(n,e,d,l,c,h){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="üôè-request" tabindex="-1">üôè Request <a class="header-anchor" href="#üôè-request" aria-label="Permalink to &quot;üôè Request&quot;">‚Äã</a></h1><p><code>jstz</code>&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request" target="_blank" rel="noreferrer"><code>Request</code></a> implementation is based on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noreferrer">Fetch API</a> specification. This API permits you to manipulate and inspect HTTP requests.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>‚ö†Ô∏è <code>jstz</code>&#39;s implementation is not spec compliant ‚ö†Ô∏è</p></div><h2 id="constructors" tabindex="-1">Constructors <a class="header-anchor" href="#constructors" aria-label="Permalink to &quot;Constructors&quot;">‚Äã</a></h2><h3 id="new-request-input-request" tabindex="-1"><code>new Request(input: Request)</code> <a class="header-anchor" href="#new-request-input-request" aria-label="Permalink to &quot;`new Request(input: Request)`&quot;">‚Äã</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Spec deviation</strong>: The <code>referer</code> is copied from the given request. Additionally the <code>mode</code> conversion is not supported.</p></div><p>Constructs a new <code>Request</code> object as a copy of the given request.</p><h3 id="new-request-input-string-init-requestinit" tabindex="-1"><code>new Request(input: string, init?: RequestInit)</code> <a class="header-anchor" href="#new-request-input-string-init-requestinit" aria-label="Permalink to &quot;`new Request(input: string, init?: RequestInit)`&quot;">‚Äã</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Spec deviation</strong>: Many of the <code>RequestInit</code> properties are not supported.</p></div><p>Creates a new <code>Request</code> object, given a URL string and optionally any request settings. The possible settings are:</p><ul><li><p><code>method</code> (<code>string</code>, optional)</p><p>A string representing the HTTP method of the request. If omitted the default value is <code>&#39;GET&#39;</code>.</p></li><li><p><code>headers</code> (<code>HeadersInit</code>, optional)</p><p>Any headers that should be attached to the request. Either a <a href="./headers.html"><code>Headers</code></a> object, an <code>Array</code> of key-value pairs, or a <code>Record&lt;string, string&gt;</code>.</p></li><li><p><code>body</code> (<code>BodyInit | null</code>, optional)</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Spec deviation</strong>: <code>Blob</code>, <code>FormData</code>, <code>ReadableStream</code> and <code>URLSearchParams</code> are not supported for <code>BodyInit</code>.</p></div><p>The body attached to the request. Either a <code>string</code> or <code>BufferSource</code> (an <code>ArrayBuffer</code> or <code>ArrayBufferView</code>). The body is required for the <code>&#39;PUT&#39;</code>, <code>&#39;POST&#39;</code> and <code>&#39;PATCH&#39;</code> methods and forbidden for the <code>&#39;GET&#39;</code>, <code>&#39;CONNECT&#39;</code>, <code>&#39;TRACE&#39;</code>, <code>&#39;OPTIONS&#39;</code> and <code>&#39;HEAD&#39;</code> methods.</p></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BodyInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BufferSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BodyInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadersInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">‚Äã</a></h2><h3 id="readonly-request-bodyused-bool" tabindex="-1"><code>readonly Request.bodyUsed: bool</code> <a class="header-anchor" href="#readonly-request-bodyused-bool" aria-label="Permalink to &quot;`readonly Request.bodyUsed: bool`&quot;">‚Äã</a></h3><p>A boolean property for whether the <code>body</code> of this <code>Request</code> has already been used or not.</p><h3 id="readonly-request-headers" tabindex="-1"><code>readonly Request.headers</code> <a class="header-anchor" href="#readonly-request-headers" aria-label="Permalink to &quot;`readonly Request.headers`&quot;">‚Äã</a></h3><p>A <code>Headers</code> object containing the headers attached to the request</p><h3 id="readonly-request-method-string" tabindex="-1"><code>readonly Request.method: string</code> <a class="header-anchor" href="#readonly-request-method-string" aria-label="Permalink to &quot;`readonly Request.method: string`&quot;">‚Äã</a></h3><p>A string representing the HTTP method of the request, eg <code>&#39;GET&#39;</code>, <code>&#39;PUT&#39;</code>, <code>&#39;POST&#39;</code>.</p><h3 id="readonly-request-url-string" tabindex="-1"><code>readonly Request.url: string</code> <a class="header-anchor" href="#readonly-request-url-string" aria-label="Permalink to &quot;`readonly Request.url: string`&quot;">‚Äã</a></h3><p>A string property for the URL of the request.</p><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">‚Äã</a></h2><h3 id="request-arraybuffer-promise-arraybuffer" tabindex="-1"><code>Request.arrayBuffer(): Promise&lt;ArrayBuffer&gt;</code> <a class="header-anchor" href="#request-arraybuffer-promise-arraybuffer" aria-label="Permalink to &quot;`Request.arrayBuffer(): Promise&lt;ArrayBuffer&gt;`&quot;">‚Äã</a></h3><p>Returns a promise that resolves with an <code>ArrayBuffer</code>.</p><h3 id="request-json-promise-any" tabindex="-1"><code>Request.json(): Promise&lt;any&gt;</code> <a class="header-anchor" href="#request-json-promise-any" aria-label="Permalink to &quot;`Request.json(): Promise&lt;any&gt;`&quot;">‚Äã</a></h3><p>Returns a promise that resolves with the result of parsing the body text as JSON.</p><h3 id="request-text-promise-string" tabindex="-1"><code>Request.text(): Promise&lt;string&gt;</code> <a class="header-anchor" href="#request-text-promise-string" aria-label="Permalink to &quot;`Request.text(): Promise&lt;string&gt;`&quot;">‚Äã</a></h3><p>Returns a promise that resolves with a UTF-16 <code>string</code>.</p>',28)]))}const k=t(i,[["render",r]]);export{u as __pageData,k as default};
