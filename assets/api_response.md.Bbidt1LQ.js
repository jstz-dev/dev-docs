import{_ as e,c as a,ag as n,o as i}from"./chunks/framework.qSHG2lgv.js";const k=JSON.parse('{"title":"🆗 Response","description":"","frontmatter":{},"headers":[],"relativePath":"api/response.md","filePath":"api/response.md"}'),t={name:"api/response.md"};function o(r,s,p,l,h,d){return i(),a("div",null,s[0]||(s[0]=[n('<h1 id="🆗-response" tabindex="-1">🆗 Response <a class="header-anchor" href="#🆗-response" aria-label="Permalink to &quot;🆗 Response&quot;">​</a></h1><p><code>jstz</code>&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noreferrer"><code>Response</code></a> implementation is based on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noreferrer">Fetch API</a> specification. The <code>Response</code> interface of the Fetch API represents the response to a request.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>⚠️ <code>jstz</code>&#39;s implementation is not spec compliant ⚠️</p></div><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><p>We can create a <code>Response</code> instance from a simple object of response properties:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world! 👋&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    headers: {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Alternatively, we can create a <code>Response</code> instance using one of the static methods:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello world! 👋&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><h3 id="new-response-body-bodyinit-null-init-responseinit-response" tabindex="-1"><code>new Response(body?: BodyInit | null, init?: ResponseInit): Response</code> <a class="header-anchor" href="#new-response-body-bodyinit-null-init-responseinit-response" aria-label="Permalink to &quot;`new Response(body?: BodyInit | null, init?: ResponseInit): Response`&quot;">​</a></h3><p>Creates a new <code>Response</code> object.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Spec deviation</strong>: <code>Blob</code>, <code>FormData</code>, <code>ReadableStream</code> and <code>URLSearchParams</code> are not supported for <code>BodyInit</code>.</p></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BodyInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BufferSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResponseInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadersInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">​</a></h2><h3 id="readonly-response-bodyused-boolean" tabindex="-1"><code>readonly Response.bodyUsed: boolean</code> <a class="header-anchor" href="#readonly-response-bodyused-boolean" aria-label="Permalink to &quot;`readonly Response.bodyUsed: boolean`&quot;">​</a></h3><p>A boolean property for whether this <code>Response</code> has already been used or not.</p><h3 id="readonly-response-headers-headers" tabindex="-1"><code>readonly Response.headers: Headers</code> <a class="header-anchor" href="#readonly-response-headers-headers" aria-label="Permalink to &quot;`readonly Response.headers: Headers`&quot;">​</a></h3><p>A <code>Headers</code> object.</p><h3 id="readonly-response-ok-boolean" tabindex="-1"><code>readonly Response.ok: boolean</code> <a class="header-anchor" href="#readonly-response-ok-boolean" aria-label="Permalink to &quot;`readonly Response.ok: boolean`&quot;">​</a></h3><p>A boolean property for whether the response was successful (status in the range 200–299) or not.</p><h3 id="readonly-response-status-number" tabindex="-1"><code>readonly Response.status: number</code> <a class="header-anchor" href="#readonly-response-status-number" aria-label="Permalink to &quot;`readonly Response.status: number`&quot;">​</a></h3><p>A number property for the HTTP status code of the response.</p><h3 id="readonly-response-statustext-string" tabindex="-1"><code>readonly Response.statusText: string</code> <a class="header-anchor" href="#readonly-response-statustext-string" aria-label="Permalink to &quot;`readonly Response.statusText: string`&quot;">​</a></h3><p>A string property for the status message corresponding to the status code.</p><h3 id="response-url-string" tabindex="-1"><code>Response.url: string</code> <a class="header-anchor" href="#response-url-string" aria-label="Permalink to &quot;`Response.url: string`&quot;">​</a></h3><p>A string property for the URL of the response.</p><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">​</a></h2><h3 id="response-arraybuffer-promise-arraybuffer" tabindex="-1"><code>Response.arrayBuffer(): Promise&lt;ArrayBuffer&gt;</code> <a class="header-anchor" href="#response-arraybuffer-promise-arraybuffer" aria-label="Permalink to &quot;`Response.arrayBuffer(): Promise&lt;ArrayBuffer&gt;`&quot;">​</a></h3><p>Returns a promise that resolves with an <code>ArrayBuffer</code>.</p><h3 id="response-json-promise-any" tabindex="-1"><code>Response.json(): Promise&lt;any&gt;</code> <a class="header-anchor" href="#response-json-promise-any" aria-label="Permalink to &quot;`Response.json(): Promise&lt;any&gt;`&quot;">​</a></h3><p>Returns a promise that resolves with the result of parsing the body text as JSON.</p><h3 id="response-text-promise-string" tabindex="-1"><code>Response.text(): Promise&lt;string&gt;</code> <a class="header-anchor" href="#response-text-promise-string" aria-label="Permalink to &quot;`Response.text(): Promise&lt;string&gt;`&quot;">​</a></h3><p>Returns a promise that resolves with a UTF-16 <code>string</code>.</p><h2 id="static-methods" tabindex="-1">Static Methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static Methods&quot;">​</a></h2><h3 id="response-error-response" tabindex="-1"><code>Response.error(): Response</code> <a class="header-anchor" href="#response-error-response" aria-label="Permalink to &quot;`Response.error(): Response`&quot;">​</a></h3><p>Returns a <code>Response</code> object associated with a network error.</p><h3 id="response-json-value-unknown-response" tabindex="-1"><code>Response.json(value: unknown): Response</code> <a class="header-anchor" href="#response-json-value-unknown-response" aria-label="Permalink to &quot;`Response.json(value: unknown): Response`&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p><strong>Spec deviation</strong>: <code>Response.json</code> doesn&#39;t permit an optional <code>init</code> parameter.</p></div><p>Returns a <code>Response</code> object with a <code>JSON</code> body.</p>',39)]))}const u=e(t,[["render",o]]);export{k as __pageData,u as default};
