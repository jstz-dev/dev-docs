import{_ as i,c as a,ag as t,o as n}from"./chunks/framework.qSHG2lgv.js";const d=JSON.parse('{"title":"Accounts","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/accounts.md","filePath":"architecture/accounts.md"}'),e={name:"architecture/accounts.md"};function h(o,s,l,c,p,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="accounts" tabindex="-1">Accounts <a class="header-anchor" href="#accounts" aria-label="Permalink to &quot;Accounts&quot;">​</a></h1><p>Jstz works with two kinds of accounts:</p><ul><li><p>User accounts start with <code>tz1</code> and store tez (XTZ).</p></li><li><p>Smart function accounts start with <code>KT1</code> and store tez and the immutable code of the smart function.</p></li></ul><h2 id="working-with-user-accounts" tabindex="-1">Working with user accounts <a class="header-anchor" href="#working-with-user-accounts" aria-label="Permalink to &quot;Working with user accounts&quot;">​</a></h2><p>User accounts are stored in the local file <code>~/.jstz/config.json</code>, including the alias, address, public key, and secret key for each account.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>You must keep the secret keys for the accounts secure. Jstz does not yet support storing keys in wallets, on hardware devices, or with remote signers.</p></div><p>To create a user account, pass an alias for the new account to the <code>jstz account create</code> command, as in this example:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> account</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ALIA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>When Jstz creates an account in this way, you can use it on any network, but for many commands you must specify the network to use with the <code>-n</code> argument.</p><p>The new account does not automatically become the active, logged in account. To switch the active account, pass the account alias to the <code>jstz login</code> command. The active account is the account that calls to smart functions and transfers of tez come from. You can list all accounts with the <code>jstz account list</code> command and get information about the active account with the <code>jstz whoami</code> command.</p><p>Before you can use an account, it must be revealed. To reveal an account, send tez to it. For example, you can bridge one tez to it with this command, where <code>&lt;ALIAS&gt;</code> is the alias for the account:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bridge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deposit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bootstrap1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ALIA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --amount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h2 id="signing-transactions-from-user-accounts" tabindex="-1">Signing transactions from user accounts <a class="header-anchor" href="#signing-transactions-from-user-accounts" aria-label="Permalink to &quot;Signing transactions from user accounts&quot;">​</a></h2><p>Because Jstz does not yet support wallets, you must provide the secret key of the user account to sign transactions. For example, the <a href="https://github.com/jstz-dev/jstz/tree/main/examples/call-from-web" target="_blank" rel="noreferrer"><code>call-from-web</code></a> sample application uses the Jstz client SDK to sign applications given the address, public key, and secret key of the application:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Jstz } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@jstz-dev/jstz-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jstz_sdk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sign operation using provided secret key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DO NOT use this in production until Jstz has a way of signing in a secure manner</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sign_operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation, secretKey);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jstzClient.operations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">injectAndPoll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  inner: operation,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  public_key: publicKey,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  signature: signature,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="working-with-smart-function-accounts" tabindex="-1">Working with smart function accounts <a class="header-anchor" href="#working-with-smart-function-accounts" aria-label="Permalink to &quot;Working with smart function accounts&quot;">​</a></h2><p>Like user accounts, you can set local aliases for smart functions with the <code>jstz account alias</code> command. Then you can refer to that alias instead of the full address in other commands.</p><p>After you deploy a smart function, you can&#39;t modify its code or access its tez balance directly, but you can view its code with the <code>jstz account code</code> command. For example to get the code of a smart function in the local sandbox, run this command, with the address or alias as <code>&lt;ALIAS_OR_ADDRESS&gt;</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> account</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ALIAS_OR_ADDRES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>To call a smart function from the command line, use the <code>jstz run</code> command and pass the address or alias, as in this example from the <a href="/dev-docs/quick_start.html">Quick start</a>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tezos://</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ALIAS_OR_ADDRES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{&quot;message&quot;:&quot;Give me tez now.&quot;}&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><p>The Jstz command-line client sends the command from the active local user account. Using aliases like this works only in the command-line client, not in the client SDK.</p>`,22)]))}const u=i(e,[["render",h]]);export{d as __pageData,u as default};
