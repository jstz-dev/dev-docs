import{_ as e,c as r,ag as s,o as t}from"./chunks/framework.qSHG2lgv.js";const m=JSON.parse('{"title":"üîç URLSearchParams","description":"","frontmatter":{},"headers":[],"relativePath":"api/url_search_params.md","filePath":"api/url_search_params.md"}'),i={name:"api/url_search_params.md"};function n(h,a,l,o,c,p){return t(),r("div",null,a[0]||(a[0]=[s('<h1 id="üîç-urlsearchparams" tabindex="-1">üîç URLSearchParams <a class="header-anchor" href="#üîç-urlsearchparams" aria-label="Permalink to &quot;üîç URLSearchParams&quot;">‚Äã</a></h1><p><code>jstz</code>&#39;s implementation of the <code>URLSearchParams</code> API defines utility methods for working with the query string of a URL according to the <a href="https://url.spec.whatwg.org/#urlsearchparams" target="_blank" rel="noreferrer">URL specification</a>. It is used for building and manipulating search parameters.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parse query string from URL</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com?foo=1&amp;bar=2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLSearchParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url.search);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add a new parameter</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;baz&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Remove parameter</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">‚Äã</a></h2><h3 id="new-urlsearchparams-init-string-string-record-string-string-string-urlsearchparams" tabindex="-1"><code>new URLSearchParams(init?: [string, string][] | Record&lt;string, string&gt; | string): URLSearchParams</code> <a class="header-anchor" href="#new-urlsearchparams-init-string-string-record-string-string-string-urlsearchparams" aria-label="Permalink to &quot;`new URLSearchParams(init?: [string, string][] | Record&lt;string, string&gt; | string): URLSearchParams`&quot;">‚Äã</a></h3><p>Creates a new instance of <code>URLSearchParams</code> with the provided key-value pairs. The <code>init</code> parameter can be one of the following:</p><ul><li>An array of key-value pairs. Each pair is an array where the first element is the key (Name) and the second is the value.</li><li>A record of <code>string</code> keys and <code>string</code> values.</li><li>A <code>string</code>, which will be parsed from <a href="https://url.spec.whatwg.org/#application/x-www-form-urlencoded" target="_blank" rel="noreferrer"><code>application/x-www-form-urlencoded</code></a> format. The leading &#39;?&#39; character is ignored.</li></ul><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">‚Äã</a></h2><h3 id="readonly-urlsearchparams-size-number" tabindex="-1"><code>readonly URLSearchParams.size: number</code> <a class="header-anchor" href="#readonly-urlsearchparams-size-number" aria-label="Permalink to &quot;`readonly URLSearchParams.size: number`&quot;">‚Äã</a></h3><p>Returns the number of search parameters present.</p><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">‚Äã</a></h2><h3 id="urlsearchparams-append-name-string-value-string-void" tabindex="-1"><code>URLSearchParams.append(name: string, value: string): void</code> <a class="header-anchor" href="#urlsearchparams-append-name-string-value-string-void" aria-label="Permalink to &quot;`URLSearchParams.append(name: string, value: string): void`&quot;">‚Äã</a></h3><p>Appends a specified name-value pair as a new search parameter.</p><h3 id="urlsearchparams-delete-name-string-value-string-void" tabindex="-1"><code>URLSearchParams.delete(name: string, value?: string): void</code> <a class="header-anchor" href="#urlsearchparams-delete-name-string-value-string-void" aria-label="Permalink to &quot;`URLSearchParams.delete(name: string, value?: string): void`&quot;">‚Äã</a></h3><p>Removes search parameters that match the given name. If a value is provided, only parameters with that name-value pair are removed.</p><h3 id="urlsearchparams-get-name-string-string-null" tabindex="-1"><code>URLSearchParams.get(name: string): string | null</code> <a class="header-anchor" href="#urlsearchparams-get-name-string-string-null" aria-label="Permalink to &quot;`URLSearchParams.get(name: string): string | null`&quot;">‚Äã</a></h3><p>Returns the first value associated with the given search parameter <code>name</code> or <code>null</code> if not found.</p><h3 id="urlsearchparams-getall-name-string-string" tabindex="-1"><code>URLSearchParams.getAll(name: string): string[]</code> <a class="header-anchor" href="#urlsearchparams-getall-name-string-string" aria-label="Permalink to &quot;`URLSearchParams.getAll(name: string): string[]`&quot;">‚Äã</a></h3><p>Returns all the values associated with a given search parameter <code>name</code>.</p><h3 id="urlsearchparams-has-name-string-value-string-boolean" tabindex="-1"><code>URLSearchParams.has(name: string, value?: string): boolean</code> <a class="header-anchor" href="#urlsearchparams-has-name-string-value-string-boolean" aria-label="Permalink to &quot;`URLSearchParams.has(name: string, value?: string): boolean`&quot;">‚Äã</a></h3><p>Determines whether the <code>UrlSearchParams</code> object has a certain parameter, optionally with a specific value.</p><h3 id="urlsearchparams-set-name-string-value-string-void" tabindex="-1"><code>URLSearchParams.set(name: string, value: string): void</code> <a class="header-anchor" href="#urlsearchparams-set-name-string-value-string-void" aria-label="Permalink to &quot;`URLSearchParams.set(name: string, value: string): void`&quot;">‚Äã</a></h3><p>Sets the value associated with a given parameter. If there are several matching parameters, it updates the first and removes the others.</p><p>If the parameter does not exist, this method will append the name-value pair.</p><h3 id="urlsearchparams-sort-void" tabindex="-1"><code>URLSearchParams.sort(): void</code> <a class="header-anchor" href="#urlsearchparams-sort-void" aria-label="Permalink to &quot;`URLSearchParams.sort(): void`&quot;">‚Äã</a></h3><p>Sorts all name-value pairs in the <code>UrlSearchParams</code> object by their names. The sorting is done by comparing the code units of the names. The relative order between pairs with equal names is preserved.</p><h3 id="urlsearchparams-tostring-string" tabindex="-1"><code>URLSearchParams.toString(): string</code> <a class="header-anchor" href="#urlsearchparams-tostring-string" aria-label="Permalink to &quot;`URLSearchParams.toString(): string`&quot;">‚Äã</a></h3><p>Returns a query string suitable for use in a URL.</p><h3 id="urlsearchparams-symbol-iterator-iterator-string-string" tabindex="-1"><code>URLSearchParams[Symbol.iterator](): Iterator&lt;[string, string]&gt;</code> <a class="header-anchor" href="#urlsearchparams-symbol-iterator-iterator-string-string" aria-label="Permalink to &quot;`URLSearchParams[Symbol.iterator](): Iterator&lt;[string, string]&gt;`&quot;">‚Äã</a></h3><p>Returns an iterator over the list of search parameter name-value pairs. This makes <code>URLSearchParams</code> instances <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" target="_blank" rel="noreferrer">iterable</a>.</p><h3 id="urlsearchparams-entries-iterator-string-string" tabindex="-1"><code>URLSearchParams.entries(): Iterator&lt;[string, string]&gt;</code> <a class="header-anchor" href="#urlsearchparams-entries-iterator-string-string" aria-label="Permalink to &quot;`URLSearchParams.entries(): Iterator&lt;[string, string]&gt;`&quot;">‚Äã</a></h3><p>Returns an iterator over the list of search parameter name-value pairs.</p><h3 id="urlsearchparams-keys-iterator-string" tabindex="-1"><code>URLSearchParams.keys(): Iterator&lt;string&gt;</code> <a class="header-anchor" href="#urlsearchparams-keys-iterator-string" aria-label="Permalink to &quot;`URLSearchParams.keys(): Iterator&lt;string&gt;`&quot;">‚Äã</a></h3><p>Returns an iterator over the search parameter names.</p><h3 id="urlsearchparams-values-iterator-string" tabindex="-1"><code>URLSearchParams.values(): Iterator&lt;string&gt;</code> <a class="header-anchor" href="#urlsearchparams-values-iterator-string" aria-label="Permalink to &quot;`URLSearchParams.values(): Iterator&lt;string&gt;`&quot;">‚Äã</a></h3><p>Returns an iterator over the search parameter values.</p><h3 id="urlsearchparams-foreach-callback-value-string-name-string-parent-urlsearchparams-void-void" tabindex="-1"><code>URLSearchParams.forEach(callback: (value: string, name: string, parent: URLSearchParams) =&gt; void): void</code> <a class="header-anchor" href="#urlsearchparams-foreach-callback-value-string-name-string-parent-urlsearchparams-void-void" aria-label="Permalink to &quot;`URLSearchParams.forEach(callback: (value: string, name: string, parent: URLSearchParams) =&gt; void): void`&quot;">‚Äã</a></h3><p>Calls the callback for each search parameter. Note that the search parameter value is the <em>first</em> callback argument, while the name is the second argument.</p>',39)]))}const g=e(i,[["render",n]]);export{m as __pageData,g as default};
