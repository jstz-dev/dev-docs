import{_ as s,c as i,ag as a,o as t}from"./chunks/framework.qSHG2lgv.js";const k=JSON.parse('{"title":"üî° TextDecoder","description":"","frontmatter":{},"headers":[],"relativePath":"api/text_decoder.md","filePath":"api/text_decoder.md"}'),n={name:"api/text_decoder.md"};function o(d,e,r,l,h,p){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="üî°-textdecoder" tabindex="-1">üî° TextDecoder <a class="header-anchor" href="#üî°-textdecoder" aria-label="Permalink to &quot;üî° TextDecoder&quot;">‚Äã</a></h1><p>The TextDecoder interface represents a decoder for a specific text encoding, such as <code>UTF-8</code>, <code>ISO-8859-2</code>, <code>KOI8-R</code>, <code>GBK</code>, etc. A decoder takes a stream of bytes as input and emits a stream of code points.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>‚ö†Ô∏è <code>jstz</code>&#39;s implementation is not fully spec compliant ‚ö†Ô∏è</p></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">‚Äã</a></h2><h3 id="new-textdecoder-label-string-options-textdecoderoptions-textdecoder" tabindex="-1"><code>new TextDecoder(label?: string, options?: TextDecoderOptions): TextDecoder</code> <a class="header-anchor" href="#new-textdecoder-label-string-options-textdecoderoptions-textdecoder" aria-label="Permalink to &quot;\`new TextDecoder(label?: string, options?: TextDecoderOptions): TextDecoder\`&quot;">‚Äã</a></h3><p>The <code>TextDecoder()</code> constructor returns a newly created TextDecoder object for the encoding specified in parameter.</p><p><strong>parameters:</strong></p><ul><li><p><code>label</code> A string, defaulting to <code>&quot;utf-8&quot;</code>. This may be <a href="https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings" target="_blank" rel="noreferrer">any valid label</a>.</p></li><li><p><code>options</code> An object with the property:</p><ul><li><code>fatal</code> A boolean value indicating if the <code>TextDecoder.decode()</code> method must throw a <code>TypeError</code> when decoding invalid data. It defaults to <code>false</code>, which means that the decoder will substitute malformed data with a replacement character.</li><li><code>ignoreBOM</code> A boolean value indicating whether the byte order mark is ignored. It defaults to <code>false</code>.</li></ul></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecoderOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  fatal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ignoreBOM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="instance-properties" tabindex="-1">Instance properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance properties&quot;">‚Äã</a></h2><h3 id="readonly-textdecoder-encoding-string" tabindex="-1"><code>readonly TextDecoder.encoding: string</code> <a class="header-anchor" href="#readonly-textdecoder-encoding-string" aria-label="Permalink to &quot;\`readonly TextDecoder.encoding: string\`&quot;">‚Äã</a></h3><p>Returns encoding&#39;s name, lowercased. The encoding is set by the <code>TextDecoder()</code> constructor <code>label</code> parameter, and defaults to <code>&quot;utf-8&quot;</code>.</p><h3 id="readonly-textdecoder-fatal-boolean" tabindex="-1"><code>readonly TextDecoder.fatal: boolean</code> <a class="header-anchor" href="#readonly-textdecoder-fatal-boolean" aria-label="Permalink to &quot;\`readonly TextDecoder.fatal: boolean\`&quot;">‚Äã</a></h3><p>The <code>fatal</code> read-only property of the <code>TextDecoder</code> interface is a boolean indicating whether the error mode is <code>fatal</code>.</p><p>If the property is <code>true</code>, then a decoder will throw a <code>TypeError</code> if it encounters malformed data while decoding. If <code>false</code>, the decoder will substitute the invalid data with the replacement character <code>U+FFFD</code> (ÔøΩ). The value of the property is set in the <code>TextDecoder()</code> constructor.</p><h3 id="readonly-textdecoder-ignorebom-boolean" tabindex="-1"><code>readonly TextDecoder.ignoreBOM: boolean</code> <a class="header-anchor" href="#readonly-textdecoder-ignorebom-boolean" aria-label="Permalink to &quot;\`readonly TextDecoder.ignoreBOM: boolean\`&quot;">‚Äã</a></h3><p>The <code>ignoreBOM</code> read-only property of the <code>TextDecoder</code> interface is a boolean indicating whether the <em>byte order mark</em> is ignored.</p><h2 id="instance-methods" tabindex="-1">Instance methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance methods&quot;">‚Äã</a></h2><h3 id="textdecoder-decode-input-buffersource-options-textdecodeoptions-string" tabindex="-1"><code>TextDecoder.decode(input?: BufferSource, options?: TextDecodeOptions): string</code> <a class="header-anchor" href="#textdecoder-decode-input-buffersource-options-textdecodeoptions-string" aria-label="Permalink to &quot;\`TextDecoder.decode(input?: BufferSource, options?: TextDecodeOptions): string\`&quot;">‚Äã</a></h3><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>‚ö†Ô∏è Spec deviation: input can not be a <code>SharedArrayBuffer</code> ‚ö†Ô∏è</p></div><p>Returns the result of running encoding&#39;s decoder. The method can be invoked zero or more times with <code>options.stream</code> set to <code>true</code>, and then once without <code>options. stream</code> (or set to <code>false</code>), to process a fragmented stream. If the invocation without <code>options.stream</code> (or set to <code>false</code>) has no input, it&#39;s clearest to omit both arguments.</p><p><strong>parameters:</strong></p><ul><li><code>input</code> An <code>ArrayBuffer</code>, a <code>TypedArray</code>, or a <code>DataView</code> object containing the encoded text to decode.</li><li><code>options</code> An object with the property: <ul><li><code>stream</code> If the error mode is &quot;fatal&quot; and encoding&#39;s decoder returns error, throws a <code>TypeError</code>.</li></ul></li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecodeOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">‚Äã</a></h2><p>Encodes and decodes the euro symbol, <code>‚Ç¨</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;‚Ç¨&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uint8Array(3) [226, 130, 172]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;encoded-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> decoder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// String &quot;‚Ç¨&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;decoded-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).textContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str;</span></span></code></pre></div><hr><p>Decode from a buffer in a loop using the <code>stream</code> option.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decoder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buffer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((buffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stream_next_chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buffer, { stream: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// end-of-stream</span></span></code></pre></div>`,30)]))}const g=s(n,[["render",o]]);export{k as __pageData,g as default};
