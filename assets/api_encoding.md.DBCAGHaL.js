import{_ as s,c as a,ag as e,o as t}from"./chunks/framework.qSHG2lgv.js";const g=JSON.parse('{"title":"üî£ Encoding","description":"","frontmatter":{},"headers":[],"relativePath":"api/encoding.md","filePath":"api/encoding.md"}'),n={name:"api/encoding.md"};function o(l,i,d,r,h,c){return t(),a("div",null,i[0]||(i[0]=[e('<h1 id="üî£-encoding" tabindex="-1">üî£ Encoding <a class="header-anchor" href="#üî£-encoding" aria-label="Permalink to &quot;üî£ Encoding&quot;">‚Äã</a></h1><p>An implementation of the Web standard encoding API. The Encoding API provides a mechanism for handling text in various character encodings, including legacy non-UTF-8 encodings.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>‚ö†Ô∏è <code>jstz</code>&#39;s implementation is not fully spec compliant ‚ö†Ô∏è</p></div><h2 id="interface" tabindex="-1">Interface <a class="header-anchor" href="#interface" aria-label="Permalink to &quot;Interface&quot;">‚Äã</a></h2><ul><li><a href="./text_encoder.html"><code>TextEncoder</code></a></li><li><a href="./text_decoder.html"><code>TextDecoder</code></a></li><li><code>atob</code></li><li><code>btoa</code></li><li><s><code>TextDecoderStream</code></s> (üî® Work in progress)</li><li><s><code>TextEncoderStream</code></s> (üî® Work in progress)</li></ul><h2 id="global" tabindex="-1">Global <a class="header-anchor" href="#global" aria-label="Permalink to &quot;Global&quot;">‚Äã</a></h2><h3 id="btoa-s-string-string" tabindex="-1"><code>btoa(s: string): string</code> <a class="header-anchor" href="#btoa-s-string-string" aria-label="Permalink to &quot;`btoa(s: string): string`&quot;">‚Äã</a></h3><p>Creates a base-64 ASCII encoded string from the input string.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">btoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// outputs &quot;aGVsbG8gd29ybGQ=&quot;</span></span></code></pre></div><h3 id="atob-s-string-string" tabindex="-1"><code>atob(s: string): string</code> <a class="header-anchor" href="#atob-s-string-string" aria-label="Permalink to &quot;`atob(s: string): string`&quot;">‚Äã</a></h3><p>Decodes a string of data which has been encoded using base-64 encoding.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aGVsbG8gd29ybGQ=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// outputs &#39;hello world&#39;</span></span></code></pre></div>',12)]))}const k=s(n,[["render",o]]);export{g as __pageData,k as default};
