import{_ as t,c as n,ag as a,o}from"./chunks/framework.qSHG2lgv.js";const u=JSON.parse('{"title":"🔣 TextEncoder","description":"","frontmatter":{},"headers":[],"relativePath":"api/text_encoder.md","filePath":"api/text_encoder.md"}'),i={name:"api/text_encoder.md"};function r(s,e,d,c,h,l){return o(),n("div",null,e[0]||(e[0]=[a('<h1 id="🔣-textencoder" tabindex="-1">🔣 TextEncoder <a class="header-anchor" href="#🔣-textencoder" aria-label="Permalink to &quot;🔣 TextEncoder&quot;">​</a></h1><p>The <code>TextEncoder</code> interface takes a stream of code points as input and emits a stream of UTF-8 bytes.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>⚠️ <code>jstz</code>&#39;s implementation is not fully spec compliant ⚠️</p></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><h3 id="new-textencoder-textencoder" tabindex="-1"><code>new TextEncoder(): TextEncoder</code> <a class="header-anchor" href="#new-textencoder-textencoder" aria-label="Permalink to &quot;`new TextEncoder(): TextEncoder`&quot;">​</a></h3><p>Returns a newly constructed <code>TextEncoder</code> that will generate a byte stream with UTF-8 encoding.</p><h2 id="instance-properties" tabindex="-1">Instance properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance properties&quot;">​</a></h2><h3 id="readonly-textencoder-encoding-string" tabindex="-1"><code>readonly TextEncoder.encoding: string</code> <a class="header-anchor" href="#readonly-textencoder-encoding-string" aria-label="Permalink to &quot;`readonly TextEncoder.encoding: string`&quot;">​</a></h3><p>Returns <code>&quot;utf-8&quot;</code>.</p><h2 id="instance-methods" tabindex="-1">Instance methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance methods&quot;">​</a></h2><h3 id="textencoder-encode-input-string-uint8array" tabindex="-1"><code>TextEncoder.encode(input: string): Uint8Array</code> <a class="header-anchor" href="#textencoder-encode-input-string-uint8array" aria-label="Permalink to &quot;`TextEncoder.encode(input: string): Uint8Array`&quot;">​</a></h3><p>Returns the result of running the UTF-8 encoder on <code>input</code>.</p><h3 id="textencoder-encodeinto-source-string-destination-uint8array-textencoderencodeintoresult" tabindex="-1"><code>TextEncoder.encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult</code> <a class="header-anchor" href="#textencoder-encodeinto-source-string-destination-uint8array-textencoderencodeintoresult" aria-label="Permalink to &quot;`TextEncoder.encodeInto(source: string, destination: Uint8Array): TextEncoderEncodeIntoResult`&quot;">​</a></h3><p>Runs the UTF-8 encoder on <code>source</code>, stores the result of that operation into <code>destination</code>, and returns the progress made as a dictionary whereby <code>read</code> is the number of converted code units of <code>source</code> and <code>written</code> is the number of bytes modified in <code>destination</code>.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextEncoderEncodeIntoResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">read</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">write</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div>',15)]))}const k=t(i,[["render",r]]);export{u as __pageData,k as default};
