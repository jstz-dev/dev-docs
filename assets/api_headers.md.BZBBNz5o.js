import{_ as a,c as s,ag as i,o as t}from"./chunks/framework.qSHG2lgv.js";const c=JSON.parse('{"title":"📰 Headers","description":"","frontmatter":{},"headers":[],"relativePath":"api/headers.md","filePath":"api/headers.md"}'),r={name:"api/headers.md"};function n(h,e,d,l,o,p){return t(),s("div",null,e[0]||(e[0]=[i('<h1 id="📰-headers" tabindex="-1">📰 Headers <a class="header-anchor" href="#📰-headers" aria-label="Permalink to &quot;📰 Headers&quot;">​</a></h1><p><code>jstz</code>&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer"><code>Headers</code></a> implementation is based on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noreferrer">Fetch API</a> specification. This API permits you to manipulate and inspect HTTP request and response headers.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>⚠️ <code>jstz</code>&#39;s implementation is not spec compliant ⚠️</p></div><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">​</a></h2><p>We can create a <code>Headers</code> instance from a simple object of header names and values:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>We can then add more headers to the <code>Headers</code> instance using <code>Headers.append()</code>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bearer 123456789&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>We can also retrieve a header value using <code>Headers.get()</code>:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authHeader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authHeader); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Bearer 123456789&quot;</span></span></code></pre></div><h2 id="referer" tabindex="-1">Referer <a class="header-anchor" href="#referer" aria-label="Permalink to &quot;Referer&quot;">​</a></h2><p>The <code>Referer</code> header is a special header that is automatically set by <code>jstz</code> when it makes a request. The value of the <code>Referer</code> header is the <code>tz1</code> address of the smart function (or account) that made the request.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> referer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Referer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;tz1...&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><h3 id="new-headers-init-headersinit-headers" tabindex="-1"><code>new Headers(init?: HeadersInit): Headers</code> <a class="header-anchor" href="#new-headers-init-headersinit-headers" aria-label="Permalink to &quot;`new Headers(init?: HeadersInit): Headers`&quot;">​</a></h3><p>Creates a new <code>Headers</code> object. A <code>HeadersInit</code> object can be an <code>Array</code> of key-value pairs, <code>Record&lt;string, string&gt;</code> or a <code>Headers</code> object.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadersInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">​</a></h2><h3 id="headers-append-name-string-value-string-void" tabindex="-1"><code>Headers.append(name: string, value: string): void</code> <a class="header-anchor" href="#headers-append-name-string-value-string-void" aria-label="Permalink to &quot;`Headers.append(name: string, value: string): void`&quot;">​</a></h3><p>Appends a new value onto an existing header inside a <code>Headers</code> object, or adds the header if it does not already exist.</p><h3 id="headers-delete-name-string-void" tabindex="-1"><code>Headers.delete(name: string): void</code> <a class="header-anchor" href="#headers-delete-name-string-void" aria-label="Permalink to &quot;`Headers.delete(name: string): void`&quot;">​</a></h3><p>Deletes a header from the <code>Headers</code> object.</p><h3 id="headers-get-name-string-string-null" tabindex="-1"><code>Headers.get(name: string): string | null</code> <a class="header-anchor" href="#headers-get-name-string-string-null" aria-label="Permalink to &quot;`Headers.get(name: string): string | null`&quot;">​</a></h3><p>Returns the associated header value of the given name, or <code>null</code> if no values are found. If the header has more than 1 value, then the values are concatenated, separated by <code>&quot;, &quot;</code>, as per the spec.</p><h3 id="headers-getsetcookie-string" tabindex="-1"><code>Headers.getSetCookie(): string[]</code> <a class="header-anchor" href="#headers-getsetcookie-string" aria-label="Permalink to &quot;`Headers.getSetCookie(): string[]`&quot;">​</a></h3><p>Returns an array of all the header values for the <code>Set-Cookie</code> header.</p><h3 id="headers-has-name-string-boolean" tabindex="-1"><code>Headers.has(name: string): boolean</code> <a class="header-anchor" href="#headers-has-name-string-boolean" aria-label="Permalink to &quot;`Headers.has(name: string): boolean`&quot;">​</a></h3><p>Returns a boolean stating whether a <code>Headers</code> object contains a certain header.</p><h3 id="headers-set-name-string-value-string-void" tabindex="-1"><code>Headers.set(name: string, value: string): void</code> <a class="header-anchor" href="#headers-set-name-string-value-string-void" aria-label="Permalink to &quot;`Headers.set(name: string, value: string): void`&quot;">​</a></h3><p>Sets a new value for an existing header inside a <code>Headers</code> object, or adds the header if it does not already exist.</p><h3 id="headers-symbol-iterator-iterator-string-string" tabindex="-1"><code>Headers[Symbol.iterator](): Iterator&lt;[string, string]&gt;</code> <a class="header-anchor" href="#headers-symbol-iterator-iterator-string-string" aria-label="Permalink to &quot;`Headers[Symbol.iterator](): Iterator&lt;[string, string]&gt;`&quot;">​</a></h3><p>Returns an iterator over the list of header name/value pairs. This makes Headers instances <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" target="_blank" rel="noreferrer">iterable</a>.</p><h3 id="headers-entries-iterator-string-string" tabindex="-1"><code>Headers.entries(): Iterator&lt;[string, string]&gt;</code> <a class="header-anchor" href="#headers-entries-iterator-string-string" aria-label="Permalink to &quot;`Headers.entries(): Iterator&lt;[string, string]&gt;`&quot;">​</a></h3><p>Returns an iterator over the list of header name/value pairs.</p><h3 id="headers-keys-iterator-string" tabindex="-1"><code>Headers.keys(): Iterator&lt;string&gt;</code> <a class="header-anchor" href="#headers-keys-iterator-string" aria-label="Permalink to &quot;`Headers.keys(): Iterator&lt;string&gt;`&quot;">​</a></h3><p>Returns an iterator over the header names.</p><h3 id="headers-values-iterator-string" tabindex="-1"><code>Headers.values(): Iterator&lt;string&gt;</code> <a class="header-anchor" href="#headers-values-iterator-string" aria-label="Permalink to &quot;`Headers.values(): Iterator&lt;string&gt;`&quot;">​</a></h3><p>Returns an iterator over the header values.</p><h3 id="headers-foreach-callback-value-string-name-string-parent-headers-void-void" tabindex="-1"><code>Headers.forEach(callback: (value: string, name: string, parent: Headers) =&gt; void): void</code> <a class="header-anchor" href="#headers-foreach-callback-value-string-name-string-parent-headers-void-void" aria-label="Permalink to &quot;`Headers.forEach(callback: (value: string, name: string, parent: Headers) =&gt; void): void`&quot;">​</a></h3><p>Calls the callback for each header. Note that the header value is the first callback argument, while the header name is the second argument.</p>',40)]))}const g=a(r,[["render",n]]);export{c as __pageData,g as default};
