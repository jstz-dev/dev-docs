import{_ as a,c as i,ag as e,o as t}from"./chunks/framework.qSHG2lgv.js";const c=JSON.parse('{"title":"ðŸ”— URL","description":"","frontmatter":{},"headers":[],"relativePath":"api/url.md","filePath":"api/url.md"}'),n={name:"api/url.md"};function h(r,s,l,p,o,k){return t(),i("div",null,s[0]||(s[0]=[e('<h1 id="ðŸ”—-url" tabindex="-1">ðŸ”— URL <a class="header-anchor" href="#ðŸ”—-url" aria-label="Permalink to &quot;ðŸ”— URL&quot;">â€‹</a></h1><p><code>jstz</code>&#39;s implementation of the <code>URL</code> API defines utilities for URL resolution and parsing according to the <a href="https://url.spec.whatwg.org/#urlsearchparams" target="_blank" rel="noreferrer">URL specification</a>.</p><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">â€‹</a></h2><p>There are two ways to create a URL: either as an absolute URL or a relative URL.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`tezos://${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_function</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/entrypoint`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../entrypoint_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url.href);</span></span></code></pre></div><p>Each <code>jstz</code> smart function is assigned a unique address, akin to an IP address, starting with <code>KT1</code> when the function is deployed. To decode these addresses, <code>jstz</code> employs its own URL scheme <code>tezos://</code>. An example URL for a <code>jstz</code> smart function would therefore be <code>tezos://KT19mYzcaYk55KttezwP4TbMrGCDpVuPW3Jw/</code>.</p><p>It&#39;s important to note that if the base URL or the resulting URL is not valid, the constructor will raise a <code>TypeError</code> exception. To check whether URLs can be parsed correctly, you can use the static method <a href="#canParse"><code>URL.canParse()</code></a>.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">canParse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(relativePath, baseUrl)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(relativePath, baseUrl);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url.href);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // the URL cannot be parsed, take appropriate action.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid URL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can also modify a URL by setting its properties.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tezos://KT19mYzcaYk55KttezwP4TbMrGCDpVuPW3Jw/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not a valid address, we&#39;ll have to change it</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url.hostname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Ledger.selfAddress;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url.pathname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;accounts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url.hash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url.href); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tezos://KT1../accounts#id</span></span></code></pre></div><p>The <a href="./url_search_params.html"><code>URLSearchParams</code></a> API may be used to build and manipulate search parameters. To get the search parameters from the URL, you can make use of the <code>.searchParams</code> instance property.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`tezos://${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/?first_name=Dave`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (url.searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;first_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jim&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url.searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jones&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sarah&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url.searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url.searchParams.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Davies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">â€‹</a></h2><h3 id="new-url-url-string-base-string-url" tabindex="-1"><code>new URL(url: string, base?: string): URL</code> <a class="header-anchor" href="#new-url-url-string-base-string-url" aria-label="Permalink to &quot;`new URL(url: string, base?: string): URL`&quot;">â€‹</a></h3><p>Constructs a URL from a given URL string and an optional base URL. If <code>base</code> if present then <code>url</code> will be interpreted as a relative URL. If <code>base</code> is not present then <code>url</code> will be interpreted as an absolute URL. Raises a <code>TypeError</code> exception if the base URL or resulting URL aren&#39;t valid URLs.</p><h2 id="instance-properties" tabindex="-1">Instance Properties <a class="header-anchor" href="#instance-properties" aria-label="Permalink to &quot;Instance Properties&quot;">â€‹</a></h2><h3 id="url-hash-string" tabindex="-1"><code>URL.hash: string</code> <a class="header-anchor" href="#url-hash-string" aria-label="Permalink to &quot;`URL.hash: string`&quot;">â€‹</a></h3><p>The fragment identifier of the URL.</p><h3 id="url-host-string" tabindex="-1"><code>URL.host: string</code> <a class="header-anchor" href="#url-host-string" aria-label="Permalink to &quot;`URL.host: string`&quot;">â€‹</a></h3><p>The host, a string containing the hostname (see below), followed by a &#39;:&#39; and the port of the URL.</p><h3 id="url-hostname-string" tabindex="-1"><code>URL.hostname: string</code> <a class="header-anchor" href="#url-hostname-string" aria-label="Permalink to &quot;`URL.hostname: string`&quot;">â€‹</a></h3><p>The hostname of the URL. In <code>jstz</code> this will usually be a <code>KT1</code> address of a smart function.</p><h3 id="href" tabindex="-1"><code>URL.href: string</code> <a class="header-anchor" href="#href" aria-label="Permalink to &quot;`URL.href: string` {#href}&quot;">â€‹</a></h3><p>A stringifier, returns the whole URL.</p><h3 id="readonly-url-origin-string" tabindex="-1"><code>readonly URL.origin: string</code> <a class="header-anchor" href="#readonly-url-origin-string" aria-label="Permalink to &quot;`readonly URL.origin: string`&quot;">â€‹</a></h3><p>The origin of the URL, specifically the scheme, the domain and the port.</p><h3 id="url-password-string" tabindex="-1"><code>URL.password: string</code> <a class="header-anchor" href="#url-password-string" aria-label="Permalink to &quot;`URL.password: string`&quot;">â€‹</a></h3><p>The password specified before the domain name.</p><h3 id="url-pathname-string" tabindex="-1"><code>URL.pathname: string</code> <a class="header-anchor" href="#url-pathname-string" aria-label="Permalink to &quot;`URL.pathname: string`&quot;">â€‹</a></h3><p>The URL path. This will always begin with a <code>&#39;/&#39;</code> and contains the part of the URL up until the query string or fragment.</p><h3 id="url-port-string" tabindex="-1"><code>URL.port: string</code> <a class="header-anchor" href="#url-port-string" aria-label="Permalink to &quot;`URL.port: string`&quot;">â€‹</a></h3><p>The port number of the URL. This has no special meaning within <code>jstz</code> and will not usually be present.</p><h3 id="url-protocol-string" tabindex="-1"><code>URL.protocol: string</code> <a class="header-anchor" href="#url-protocol-string" aria-label="Permalink to &quot;`URL.protocol: string`&quot;">â€‹</a></h3><p>The protocol scheme of the URL. Within <code>jstz</code> this will usually be <code>tezos:</code></p><h3 id="url-search-string" tabindex="-1"><code>URL.search: string</code> <a class="header-anchor" href="#url-search-string" aria-label="Permalink to &quot;`URL.search: string`&quot;">â€‹</a></h3><p>The URL&#39;s search parameter string, This will include all the search parameters of the URL, each of which begins with a <code>&#39;?&#39;</code>.</p><h3 id="readonly-url-searchparams-urlsearchparams" tabindex="-1"><code>readonly URL.searchParams: URLSearchParams</code> <a class="header-anchor" href="#readonly-url-searchparams-urlsearchparams" aria-label="Permalink to &quot;`readonly URL.searchParams: URLSearchParams`&quot;">â€‹</a></h3><p>The search parameter object. See <a href="./url_search_params.html"><code>URLSearchParams</code></a> for more information.</p><h3 id="url-username-string" tabindex="-1"><code>URL.username: string</code> <a class="header-anchor" href="#url-username-string" aria-label="Permalink to &quot;`URL.username: string`&quot;">â€‹</a></h3><p>The username specified before the domain name.</p><h2 id="static-methods" tabindex="-1">Static Methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static Methods&quot;">â€‹</a></h2><h3 id="canParse" tabindex="-1"><code>URL.canParse(url: string, base?: string): boolean</code> <a class="header-anchor" href="#canParse" aria-label="Permalink to &quot;`URL.canParse(url: string, base?: string): boolean` {#canParse}&quot;">â€‹</a></h3><p>Returns <code>true</code> if the URL and base URL strings can be parsed into a valid URL.</p><h2 id="instance-methods" tabindex="-1">Instance Methods <a class="header-anchor" href="#instance-methods" aria-label="Permalink to &quot;Instance Methods&quot;">â€‹</a></h2><h3 id="url-tostring-string" tabindex="-1"><code>URL.toString(): string</code> <a class="header-anchor" href="#url-tostring-string" aria-label="Permalink to &quot;`URL.toString(): string`&quot;">â€‹</a></h3><p>An alias for <a href="#href"><code>href</code></a>; returns the whole URL as a string.</p><h3 id="url-tojson-string" tabindex="-1"><code>URL.toJSON(): string</code> <a class="header-anchor" href="#url-tojson-string" aria-label="Permalink to &quot;`URL.toJSON(): string`&quot;">â€‹</a></h3><p>An alias for <a href="#href"><code>href</code></a>; returns the whole URL as a string.</p>',48)]))}const E=a(n,[["render",h]]);export{c as __pageData,E as default};
